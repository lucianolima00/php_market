<?php

namespace App\tests\unit\dtos;

use App\dtos\SaleDto;
use App\dtos\SaleProductDto;
use PHPUnit\Framework\TestCase;

class SaleDtoTest extends TestCase
{
    private array $saleProducts;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->saleProducts = [
            SaleProductDto::fromModel([
                'product_id' => 1,
                'quantity' => 10.0,
                'unit_value' => 10.0,
                'tax' => 10.0,
            ]),
            SaleProductDto::fromModel([
                'product_id' => 2,
                'quantity' => 12.0,
                'unit_value' => 20.0,
                'tax' => 12.0,
            ]),
        ];
    }

    public function testFromModelWithAllValuesCorrect()
    {
        $sale = [
            'subject' => 'Test',
            'products' => $this->saleProducts,
        ];

        $dto = SaleDto::fromModel($sale);

        $this->assertEquals('Test', $dto->subject);
        $this->assertEquals($this->saleProducts, $dto->products);
    }

    public function testFromModelMissingOneValue()
    {
        $sale = [
            'products' => 'Test products',
        ];

        $this->expectException(\InvalidArgumentException::class);

        SaleDto::fromModel($sale);
    }

    public function testFromModelMissingTwoValue()
    {
        $this->expectException(\InvalidArgumentException::class);

        SaleDto::fromModel([]);
    }

    public function testFromModelWithProductsNull()
    {
        $sale = [
            'products' => null,
        ];

        $this->expectException(\InvalidArgumentException::class);

        SaleDto::fromModel($sale);
    }

    public function testFromModelWithSubjectIncorrect()
    {
        $sale = [
            'subject' => 12,
            'products' => $this->saleProducts,
        ];

        $this->expectException(\InvalidArgumentException::class);

        SaleDto::fromModel($sale);
    }

    public function testFromModelWithProductsIncorrectAsNotArray()
    {
        $sale = [
            'subject' => 'Test',
            'products' => 12,
        ];

        $this->expectException(\InvalidArgumentException::class);

        SaleDto::fromModel($sale);
    }

    public function testFromModelWithProductsIncorrectAsNotSaleProduct()
    {
        $sale = [
            'subject' => 'Test',
            'products' => [12],
        ];

        $this->expectException(\InvalidArgumentException::class);

        SaleDto::fromModel($sale);
    }
}